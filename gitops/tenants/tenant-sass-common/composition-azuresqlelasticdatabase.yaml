# composition-azuresqlelasticdatabase.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: azuresqlelasticdatabase-composition
  labels:
    provider: azure
    service: sql
spec:
  compositeTypeRef:
    apiVersion: azure.example.org/v1alpha1
    kind: XAzureSQLElasticDatabase
  resources:
    # 1. Create a Resource Group
    - name: resourcegroup
      base:
        apiVersion: azure.upbound.io/v1beta1
        kind: ResourceGroup
        spec:
          forProvider: {}
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: metadata.annotations[crossplane.io/external-name] # Use XR's name as external name
          transforms:
            - type: Format
              fmt: "%s-rg"
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: metadata.name
          transforms:
            - type: Format
              fmt: "%s-rg"

    # 2. Create an Azure SQL Server
    - name: sqlserver
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLServer
        spec:
          forProvider:
            serverVersion: "12.0" # or "1.0" for latest supported by provider
            publicNetworkAccessEnabled: true
            minimalTlsVersion: "1.2"
            # Add firewall rules if necessary, e.g., for allowing Azure services or specific IPs
            firewallRules:
              - name: AllowAzureServices
                startIpAddress: "0.0.0.0"
                endIpAddress: "0.0.0.0"
          writeConnectionSecretToRef:
            namespace: crossplane-system # Or a dedicated secrets namespace
            name: sqldb-connection-details
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: Format
              fmt: "%s-rg"
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.administratorLogin
          toFieldPath: spec.forProvider.administratorLogin
        - fromFieldPath: spec.parameters.administratorLoginPasswordSecretRef.name
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.name
        - fromFieldPath: spec.parameters.administratorLoginPasswordSecretRef.key
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.key
      connectionDetails:
        - fromConnectionSecretKey: username
        - fromConnectionSecretKey: password
        - fromConnectionSecretKey: port
        - fromConnectionSecretKey: endpoint

    # 3. Create an Azure SQL Elastic Pool
    - name: elasticpool
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLElasticPool
        spec:
          forProvider:
            perDatabaseSettings:
              maxCapacity: 1
              minCapacity: 0
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: Format
              fmt: "%s-rg"
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.serverNameRef.name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.name
          transforms:
            - type: Format
              fmt: "%s-pool"
        - fromFieldPath: spec.parameters.elasticPoolSku.name
          toFieldPath: spec.forProvider.sku.name
        - fromFieldPath: spec.parameters.elasticPoolSku.tier
          toFieldPath: spec.forProvider.sku.tier
        - fromFieldPath: spec.parameters.elasticPoolSku.capacity
          toFieldPath: spec.forProvider.sku.capacity
        - fromFieldPath: spec.parameters.elasticPoolSku.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: Format
              fmt: "%s-pool"

    # 4. Create Azure SQL Databases within the Elastic Pool
    # This uses a forEach patch to create multiple databases based on the 'databases' array in the XR.
    - name: sqldatabases
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLDatabase
        spec:
          forProvider:
            collation: SQL_Latin1_General_CP1_CI_AS # Default collation
          writeConnectionSecretToRef:
            namespace: crossplane-system # Or a dedicated secrets namespace
      patches:
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: Format
              fmt: "%s-rg"
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.serverNameRef.name
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: Combine
              variables:
                - fromFieldPath: spec.parameters.databases[name] # Access the current database name in the loop
              string:
                fmt: "%s-%s"
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: Combine
              variables:
                - fromFieldPath: spec.parameters.databases[name]
              string:
                fmt: "%s-%s"
        - fromFieldPath: spec.parameters.databases[name]
          toFieldPath: spec.forProvider.name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.elasticPoolIdRef.name
          transforms:
            - type: Format
              fmt: "%s-pool"
        - fromFieldPath: spec.parameters.databases[collation]
          toFieldPath: spec.forProvider.collation
          # Optional: Only apply if collation is provided
          policy:
            fromFieldPath: Optional
      # The `forEach` block here is key for creating multiple databases dynamically.
      forEach: spec.parameters.databases