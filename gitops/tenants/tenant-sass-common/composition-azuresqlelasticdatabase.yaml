# composition-azuresqlelasticdatabase.yaml
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: azuresqlelasticdatabase-composition
  labels:
    provider: azure
    service: sql
spec:
  compositeTypeRef:
    apiVersion: azure.example.org/v1alpha1
    kind: XAzureSQLElasticDatabase
  resources:
    # 1. Create a Resource Group
    - name: resourcegroup
      base:
        apiVersion: azure.upbound.io/v1beta1
        kind: ResourceGroup
        spec:
          forProvider: {}
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        # Reverted: No namespace in resource group name
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%s-rg"
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-rg"

    # 2. Create an Azure SQL Server
    - name: sqlserver
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLServer
        spec:
          forProvider:
            serverVersion: "12.0"
            publicNetworkAccessEnabled: true
            minimalTlsVersion: "1.2"
            administratorLoginPasswordSecretRef: {} # Will be patched below
            firewallRules:
              - name: AllowAzureServices
                startIpAddress: "0.0.0.0"
                endIpAddress: "0.0.0.0"
          writeConnectionSecretToRef: {} # Will be patched below
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        # Patch Resource Group Reference with original constructed name
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-rg"
        # Reverted: No namespace in server name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.administratorLogin
          toFieldPath: spec.forProvider.administratorLogin
        - fromFieldPath: spec.parameters.administratorLoginPasswordSecretRef.name
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.name
        - fromFieldPath: spec.parameters.administratorLoginPasswordSecretRef.key
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.key
        # RETAINED: Patch namespace for admin password secret ref
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.administratorLoginPasswordSecretRef.namespace
        # RETAINED: Patch namespace for connection secret
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: writeConnectionSecretToRef.namespace
      connectionDetails:
        - fromConnectionSecretKey: username
        - fromConnectionSecretKey: password
        - fromConnectionSecretKey: port
        - fromConnectionSecretKey: endpoint

    # 3. Create an Azure SQL Elastic Pool
    - name: elasticpool
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLElasticPool
        spec:
          forProvider:
            perDatabaseSettings:
              maxCapacity: 1
              minCapacity: 0
      patches:
        - fromFieldPath: spec.parameters.location
          toFieldPath: spec.forProvider.location
        # Patch Resource Group Reference with original constructed name
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-rg"
        # Patch Server Name Reference with original constructed name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.serverNameRef.name
        # Reverted: No namespace in pool name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-pool"
        - fromFieldPath: spec.parameters.elasticPoolSku.name
          toFieldPath: spec.forProvider.sku.name
        - fromFieldPath: spec.parameters.elasticPoolSku.tier
          toFieldPath: spec.forProvider.sku.tier
        - fromFieldPath: spec.parameters.elasticPoolSku.capacity
          toFieldPath: spec.forProvider.sku.capacity
        - fromFieldPath: spec.parameters.elasticPoolSku.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%s-pool"

    # 4. Create Azure SQL Databases within the Elastic Pool
    - name: sqldatabases
      base:
        apiVersion: sql.azure.upbound.io/v1beta1
        kind: MSSQLDatabase
        spec:
          forProvider:
            collation: SQL_Latin1_General_CP1_CI_AS # Default collation
          writeConnectionSecretToRef: {}
      patches:
        - fromFieldPath: spec.parameters.resourceGroupName
          toFieldPath: spec.forProvider.resourceGroupNameRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-rg"
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.serverNameRef.name
        # --- CRITICAL CHANGES FOR DATABASE NAMING PATCHES ---
        # The 'fromFieldPath' of the patch itself now points to the database's 'name'
        # (which is the current item in the forEach loop). This will be the FIRST input to fmt.
        # The XR's metadata.name will be provided as a variable, becoming the SECOND input.

        # Patching external-name for the database (e.g., "myfirstdb-my-app-db-cluster")
        - type: FromCompositeFieldPath # Retain this type
          fromFieldPath: name # <-- CRITICAL: This is the name of the current database item in the loop (e.g., "myfirstdb")
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%s-%s" # <-- fmt will now receive DB_NAME, then XR_NAME
                variables:
                  # This variable gets the XR's metadata.name by navigating up from the current forEach item.
                  - fromFieldPath: ../../../metadata.name # <-- CRITICAL: Path to XR's metadata.name
        # Patching Kubernetes managed resource name (e.g., "myfirstdb-my-app-db-cluster")
        - type: FromCompositeFieldPath # Retain this type
          fromFieldPath: name # <-- CRITICAL: This is the name of the current database item in the loop
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-%s" # <-- fmt will now receive DB_NAME, then XR_NAME
                variables:
                  - fromFieldPath: ../../../metadata.name # <-- CRITICAL: Path to XR's metadata.name
        # --- END CRITICAL CHANGES ---

        # Patching actual Azure SQL Database name (spec.forProvider.name) - This one was already fixed and is correct.
        - fromFieldPath: name
          toFieldPath: spec.forProvider.name
        - fromFieldPath: spec.parameters.serverName
          toFieldPath: spec.forProvider.elasticPoolIdRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-pool"
        - fromFieldPath: collation
          toFieldPath: spec.forProvider.collation
          policy:
            fromFieldPath: Optional
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: writeConnectionSecretToRef.namespace
      forEach: spec.parameters.databases